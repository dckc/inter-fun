diff --git a/node_modules/@endo/marshal/src/encodePassable.js b/node_modules/@endo/marshal/src/encodePassable.js
index 554de13..2f787ec 100644
--- a/node_modules/@endo/marshal/src/encodePassable.js
+++ b/node_modules/@endo/marshal/src/encodePassable.js
@@ -103,9 +103,9 @@ const encodeBinary64 = n => {
   asNumber[0] = n;
   let bits = asBits[0];
   if (n < 0) {
-    bits ^= 0xffffffffffffffffn;
+    bits ^= BigInt('0xffffffffffffffffn');
   } else {
-    bits ^= 0x8000000000000000n;
+    bits ^= BigInt('0x8000000000000000n');
   }
   return `f${zeroPad(bits.toString(16), 16)}`;
 };
@@ -118,9 +118,9 @@ const decodeBinary64 = encoded => {
   encoded.startsWith('f') || Fail`Encoded number expected: ${encoded}`;
   let bits = BigInt(`0x${encoded.substring(1)}`);
   if (encoded[1] < '8') {
-    bits ^= 0xffffffffffffffffn;
+    bits ^= BigInt('0xffffffffffffffffn');
   } else {
-    bits ^= 0x8000000000000000n;
+    bits ^= BigInt('0x8000000000000000n');
   }
   asBits[0] = bits;
   const result = asNumber[0];
@@ -146,10 +146,10 @@ const decodeBinary64 = encoded => {
  * @returns {string}
  */
 const encodeBigInt = n => {
-  const abs = n < 0n ? -n : n;
+  const abs = n < BigInt('0') ? -n : n;
   const nDigits = abs.toString().length;
   const lDigits = nDigits.toString().length;
-  if (n < 0n) {
+  if (n < BigInt('0')) {
     return `n${
       // A "#" for each digit beyond the first
       // in the decimal *count* of decimal digits.
@@ -159,7 +159,7 @@ const encodeBigInt = n => {
       (10 ** lDigits - nDigits).toString().padStart(lDigits, '0')
     }:${
       // The ten's complement of the digits.
-      (10n ** BigInt(nDigits) + n).toString().padStart(nDigits, '0')
+      (BigInt('10') ** BigInt(nDigits) + n).toString().padStart(nDigits, '0')
     }`;
   } else {
     return `p${
@@ -210,7 +210,7 @@ const decodeBigInt = encoded => {
   if (typePrefix === 'n') {
     // TODO Assert to reject forbidden encodings
     // like "n9:0" and "n8:00" and "n8:91" through "n8:99"?
-    n = -(10n ** BigInt(nDigits) - n);
+    n = -(BigInt('10') ** BigInt(nDigits) - n);
   }
 
   return n;
diff --git a/node_modules/@endo/marshal/src/encodeToSmallcaps.js b/node_modules/@endo/marshal/src/encodeToSmallcaps.js
index 31993d4..34b9438 100644
--- a/node_modules/@endo/marshal/src/encodeToSmallcaps.js
+++ b/node_modules/@endo/marshal/src/encodeToSmallcaps.js
@@ -208,7 +208,7 @@ export const makeEncodeToSmallcaps = (encodeOptions = {}) => {
       }
       case 'bigint': {
         const str = String(passable);
-        return /** @type {bigint} */ (passable) < 0n ? str : `+${str}`;
+        return str.startsWith('-') ? str : `+${str}`;
       }
       case 'symbol': {
         assertPassableSymbol(passable);
